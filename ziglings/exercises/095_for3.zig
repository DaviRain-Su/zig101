//
// Zig 语言正在快速发展并不断改进语言结构。Ziglings 也会随之进化。
//
// 在 0.11 版本之前，Zig 的 'for' 循环并不能直接复现
// C 风格的 "for(a;b;c)"，而后者非常适合迭代数字序列。
//
// 取而代之的是用带计数器的 'while' 循环来笨拙地代替：
//
//     var i: usize = 0;
//     while (i < 10) : (i += 1) {
//         // 这里变量 'i' 的值会依次是 0 到 9。
//     }
//
// 但现在我们处在美好的未来，Zig 的 'for' 循环
// 可以写成这种形式了：
//
//     for (0..10) |i| {
//         // 这里变量 'i' 的值会依次是 0 到 9。
//     }
//
// 理解这个例子的关键是要知道 '0..9' 使用了新的区间语法：
//
//     0..10 表示从 0 到 9 的区间
//     1..4  表示从 1 到 3 的区间
//
// 目前，区间语法在循环里只支持 'for' 循环。
//
// 也许你还记得练习 13？我们当时是这样打印一个数字序列的：
//
//     var n: u32 = 1;
//
//     // 我要打印 1 到 20 之间所有不能被 3 或 5 整除的数字。
//     while (n <= 20) : (n += 1) {
//         // '%' 是取模运算符，返回除法的余数。
//         if (n % 3 == 0) continue;
//         if (n % 5 == 0) continue;
//         std.debug.print("{} ", .{n});
//     }
//
// 让我们尝试用新的 'for' 形式重新实现这个练习：
//
const std = @import("std");

pub fn main() void {

    // 我要打印 1 到 20 之间所有不能被 3 或 5 整除的数字。
    for (1..21) |n| {

        // '%' 是取模运算符，返回除法的余数。
        if (n % 3 == 0) continue;
        if (n % 5 == 0) continue;
        std.debug.print("{} ", .{n});
    }

    std.debug.print("\n", .{});
}
//
// 这样是不是更简洁了？
//
// 当然，'while' 和 'for' 各有优点。
// 练习 11、12 和 14 并不能仅仅通过换成 'for' 就得到简化。
