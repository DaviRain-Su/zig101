//
// 现在我们来用指针做一件之前做不到的事：
// 把一个值 **通过引用** 传递给函数。
//
// 为什么要把一个整数变量的指针传给函数，
// 而不是把整数值本身传进去呢？
// 因为这样我们就能在函数里 *修改* 这个变量的值了！
//
//     +-----------------------------------------------+
//     | 当你希望修改被指向的值时，就用引用传递。    |
//     | 否则，就传递值本身。                        |
//     +-----------------------------------------------+
//
const std = @import("std");

pub fn main() void {
    var num: u8 = 1;
    var more_nums = [_]u8{ 1, 1, 1, 1 };

    // 把 num 的引用传给函数并打印：
    makeFive(&num);
    std.debug.print("num: {}, ", .{num});

    // 更有意思的是：我们把数组里某个具体值的引用传进去：
    makeFive(&more_nums[2]);

    // 打印整个数组：
    std.debug.print("more_nums: ", .{});
    for (more_nums) |n| {
        std.debug.print("{} ", .{n});
    }

    std.debug.print("\n", .{});
}

// 这个函数应该接收一个 u8 值的引用，并把它设为 5。
fn makeFive(x: *u8) void {
    ??? = 5; // 修复这里！
}
