//
// `for` 循环不仅仅局限于遍历一个或两个对象。
// 我们来试试遍历一大堆对象的例子！
//
// 不过在此之前，还有最后一个我们一直没提的东西：
// 可以省略最后值的特殊范围：
//
//     for ( things, 0.. ) |t, i| { ... }
//
// 这是我们告诉 Zig：我们想要对 `things` 的每一项获取一个数值，
// 而这个数值从 0 开始。
//
// 这个索引范围的一个好处是：你可以让它从任意数字开始。
// 例如下面这个例子里，`i` 的第一个值就是 500，然后是 501、502 等等：
//
//     for ( things, 500.. ) |t, i| { ... }
//
// 还记得我们的 RPG 角色吗？他们有以下属性，之前我们存储在一个结构体里：
//
//     class
//     gold
//     experience
//
// 现在我们要存储相同的 RPG 角色数据，不过把每个属性放在单独的数组里。
//
// 看起来可能有点别扭，但先忍一忍吧。
//
// 我们已经开始写一个程序，想打印一个角色编号列表，包含每个角色的属性，
// 但它需要一点修复：
//
const std = @import("std");
const print = std.debug.print;

// 这是我们之前见过的角色职业枚举。
const Role = enum {
    wizard,
    thief,
    bard,
    warrior,
};

pub fn main() void {
    // 这里是三个“属性”数组：
    const roles = [4]Role{ .wizard, .bard, .bard, .warrior };
    const gold = [4]u16{ 25, 11, 5, 7392 };
    const experience = [4]u8{ 40, 17, 55, 21 };

    // 我们希望列表编号从 1 开始，而不是 0。
    // 该怎么做呢？
    for (roles, gold, experience, ???) |c, g, e, i| {
        const role_name = switch (c) {
            .wizard => "Wizard",
            .thief => "Thief",
            .bard => "Bard",
            .warrior => "Warrior",
        };

        std.debug.print("{d}. {s} (Gold: {d}, XP: {d})\n", .{
            i,
            role_name,
            g,
            e,
        });
    }
}
//
// 顺便说一句，把角色数据这样放到数组里，
// 不仅仅是为了演示多对象 `for` 循环的一个傻例子。
//
// 它*同时*也是引入一个叫做 **数据导向设计**（data-oriented design）的概念。
//
// 我们用一个比喻来直观理解它：
//
// 假设你要从一个魔法袋子里拿出三颗玻璃弹珠、三把勺子和三根羽毛。
// 但是不能用手，而是必须用弹珠勺、勺子磁铁和羽毛夹子来分别取出。
//
// 那么，你更愿意魔法袋这样装：
//
// A. 把物品按组混合放：一颗弹珠、一把勺子、一根羽毛……依次类推？
//
//    还是
//
// B. 把物品按种类分组：先放所有的弹珠，再放所有的勺子，再放所有的羽毛？
//
// 如果这个比喻生效了，你应该能看出来 **B 更高效**。
//
// 毫无意外，把数据按顺序、按类型存储和使用，
// 对现代 CPU 来说也更高效。
//
// 数十年的 OOP 实践让人们习惯把不同类型的数据混在一起，形成“对象”，
// 这样对人脑更友好。
// 而数据导向设计则是把数据按类型分组，这样对计算机更友好。
//
// 如果语言设计足够巧妙，也许我们能两者兼得。
//
// 在 Zig 社区里，你可能会看到这两种方式被称作：
// - **AoS（Array of Structs，结构体数组）**
// - **SoA（Struct of Arrays，数组的结构体）**
//
// 用 RPG 角色来比喻的话：
// - AoS = 一个数组，里面的每个角色是一个结构体，包含三种不同类型的数据；
// - SoA = 一个结构体，里面包含三组数组，每组都是同一种类型的数据，
//   就像上面练习里的那样。
//
// 想了解数据导向设计更实际的应用，
// 可以看看 Zig 创始人 Andrew Kelley 的演讲：
// https://vimeo.com/649009599
