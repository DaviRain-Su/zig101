//
// 我们已经看到 `for` 循环可以对数组或切片中的每个元素执行某些操作。
//
// 最近，我们发现它也支持范围（range），可以用来遍历数值序列。
//
// 这其实是 `for` 循环更通用的能力的一部分：
// 它可以遍历一个或多个“对象”，而对象可以是数组、切片或范围。
//
// 事实上，我们*确实*在练习 016 里用过多个对象，
// 当时我们同时遍历了一个数组和一个数字索引。
// 其实当时语法还没这么用，所以那个练习后来稍微改过一点。
//
//     for (bits, 0..) |bit, i| { ... }
//
// 使用两个列表的 `for` 循环的一般形式是：
//
//     for (list_a, list_b) |a, b| {
//         // 这里我们会同时拿到 list_a 的第一个元素和 list_b 的第一个元素
//         // 然后是第二个元素、第三个元素……依次类推。
//     }
//
// 最美妙的地方在于：我们完全不用自己维护索引或手动移动内存指针。
// 这些容易出错的事都由编译器帮我们搞定了。
//
// 下面有一个程序，它应该比较两个数组。
// 请把它修好！
//
const std = @import("std");
const print = std.debug.print;

pub fn main() void {
    const hex_nums = [_]u8{ 0xb, 0x2a, 0x77 };
    const dec_nums = [_]u8{ 11, 42, 119 };

    for (hex_nums, ???) |hn, ???| {
        if (hn != dn) {
            print("糟糕！发现不匹配：{d} vs {d}\n", .{ hn, dn });
            return;
        }
    }

    print("数组匹配！\n", .{});
}
//
// 你可能会想：如果两个列表的长度不同，会发生什么？
// 试试看！
//
// 顺便说一句，恭喜你做到第 100 个练习啦！
//
//    +-------------+
//    | 庆祝区 Celebration |
//    |  * * * * *  |
//    +-------------+
//
// 请把庆祝活动控制在指定区域内哦。
